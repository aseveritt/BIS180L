library(shiny)
shinyUI(fluidPage)
))
library(shiny)
shinyUI(fluidPage(
titlePanel("Iris Data"),
helpText("This application creates a boxplot to show difference      between","iris species.  Please use the radio box below to choose a   trait","for plotting"),
sidebarLayout(
sidebarPanel(
radioButtons("trait",
"Choose a trait to display:",
c("Sepal.Length",
"Sepal.Width",
"Petal.Length",
"Petal.Width")
)),
mainPanel(plotOutput("boxPlot")
)
)
))
library(shiny)
ui <- shinyUI(fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
server <- shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
shinyApp(ui = ui, server = server)
library(shiny)
shinyUI(fluidPage(
titlePanel("Iris Data"),
helpText("This application creates a boxplot to show difference between",
"iris species.  Please use the radio box below to choose a trait",
"for plotting"),
sidebarLayout(
sidebarPanel(
radioButtons("trait",
"Choose a trait to display:",
c("Sepal.Length",
"Sepal.Width",
"Petal.Length",
"Petal.Width")
)),
mainPanel(plotOutput("boxPlot")
)
)
))
library(shiny)
shiny::runApp('MEGAsync/Shiny_Amanda-Brianna-Saghi/App_Amanda-Brianna-Saghi')
data.pheno<-read.csv("/home/bis180l_local/MEGAsync/Assignment_4_Nojoomi.Saghi/RiceSNPData//RiceDiversity.44K.MSU6.Phenotypes.csv",row.names = 1, na.strings=c("NA","00"))
library(shiny)
library(ggplot2)
output$boxPlot <- renderPlot({
# set up the plot
pl <- ggplot(data = data.pheno,
#Use aes_string below so that input$trait is interpreted
#correctly.  The other variables need to be quoted
aes_string(x="Protein.content",
y=input$trait,
fill="Protein.content"
)
)
pl + geom_boxplot()
})
})
runApp('MEGAsync/Shiny_Amanda-Brianna-Saghi/App_Amanda-Brianna-Saghi')
library(shiny)
library(ggplot2)
# Define server logic required to draw a boxplot
shinyServer(function(input, output) {
output$boxPlot <- renderPlot({
# set up the plot
pl <- ggplot(data = data.pheno,
#Use aes_string below so that input$trait is interpreted
#correctly.  The other variables need to be quoted
aes_string(x="Protein.content",
y=input$trait,
fill="Protein.content"
)
)
pl + geom_boxplot()
})
})
runApp('MEGAsync/Shiny_Amanda-Brianna-Saghi/App_Amanda-Brianna-Saghi')
runApp('/home/bis180l_local/MEGAsync/Shiny_Amanda-Brianna-Saghi/App_Amanda-Brianna-Saghi/')
runApp('/home/bis180l_local/MEGAsync/Shiny_Amanda-Brianna-Saghi/App_Amanda-Brianna-Saghi/')
runApp('/home/bis180l_local/MEGAsync/Shiny_Amanda-Brianna-Saghi/App_Amanda-Brianna-Saghi/')
shiny::runApp('MEGAsync/Shiny_Amanda-Brianna-Saghi/App_Amanda-Brianna-Saghi')
library(shiny)
library(ggplot2)
runApp('MEGAsync/Shiny_Amanda-Brianna-Saghi/App_Amanda-Brianna-Saghi')
runApp('MEGAsync/Shiny_Amanda-Brianna-Saghi/App_Amanda-Brianna-Saghi')
runApp('/home/MEGAsync/Shiny_Amanda-Brianna-Saghi/App_Amanda-Brianna-Saghi')
runApp('/home/MEGAsync/Shiny_Amanda-Brianna-Saghi/App_Amanda-Brianna-Saghi')
library(shiny)
library(ggplot2)
install.packages("shiny")
install.packages("shiny")
runApp('/home/MEGAsync/Shiny_Amanda-Brianna-Saghi/App_Amanda-Brianna-Saghi')
runApp('/home/MEGAsync/Shiny_Amanda-Brianna-Saghi/App_Amanda-Brianna-Saghi')
runApp('/home/MEGAsync/Shiny_Amanda-Brianna-Saghi/App_Amanda-Brianna-Saghi')
runApp('/home/MEGAsync/Shiny_Amanda-Brianna-Saghi/App_Amanda-Brianna-Saghi')
runApp('/home/MEGAsync/Shiny_Amanda-Brianna-Saghi/App_Amanda-Brianna-Saghi')
shiny::runApp('MEGAsync/Shiny_Amanda-Brianna-Saghi/App_Amanda-Brianna-Saghi')
runApp('MEGAsync/Shiny_Amanda-Brianna-Saghi/App_Amanda-Brianna-Saghi')
